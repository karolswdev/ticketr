name: CI

on:
  push:
    branches:
      - main
      - 'feat/**'
  pull_request:
    branches:
      - main

jobs:
  build:
    name: Build
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        go-version: ['1.21', '1.22', '1.23']

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.go-version }}

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ matrix.go-version }}-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-${{ matrix.go-version }}-

      - name: Download dependencies
        run: go mod download

      - name: Build application
        run: go build -v ./cmd/ticketr

      - name: Verify build artifact
        run: |
          if [ -f "./ticketr" ] || [ -f "./ticketr.exe" ]; then
            echo "Build successful"
          else
            echo "Build failed - binary not found"
            exit 1
          fi

  test:
    name: Test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22'

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-test-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-test-

      - name: Download dependencies
        run: go mod download

      - name: Run tests with race detector
        run: go test ./... -v -race -coverprofile=coverage.out -covermode=atomic

      - name: Upload coverage artifact
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage.out
          retention-days: 7

  coverage:
    name: Coverage
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22'

      - name: Download coverage artifact
        uses: actions/download-artifact@v4
        with:
          name: coverage-report

      - name: Generate coverage report
        run: |
          go tool cover -func=coverage.out > coverage.txt
          cat coverage.txt

      - name: Check coverage threshold
        run: |
          COVERAGE=$(go tool cover -func=coverage.out | tail -1 | awk '{print $3}' | sed 's/%//')
          echo "Total coverage: $COVERAGE%"

          # Minimum threshold: 50%
          THRESHOLD=50

          if (( $(echo "$COVERAGE < $THRESHOLD" | bc -l) )); then
            echo "ERROR: Coverage $COVERAGE% is below threshold $THRESHOLD%"
            exit 1
          else
            echo "SUCCESS: Coverage $COVERAGE% meets threshold $THRESHOLD%"
          fi

      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-text-report
          path: coverage.txt
          retention-days: 30

  lint:
    name: Lint
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22'

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-lint-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-lint-

      - name: Download dependencies
        run: go mod download

      - name: Run go vet
        run: go vet ./...

      - name: Check formatting
        run: |
          UNFORMATTED=$(gofmt -l .)
          if [ -n "$UNFORMATTED" ]; then
            echo "The following files are not formatted:"
            echo "$UNFORMATTED"
            echo ""
            echo "Please run: gofmt -w ."
            exit 1
          fi
          echo "All files are properly formatted"

      - name: Install staticcheck
        run: go install honnef.co/go/tools/cmd/staticcheck@latest

      - name: Run staticcheck
        run: staticcheck ./...

      - name: Check go.mod tidiness
        run: |
          go mod tidy
          if [ -n "$(git diff go.mod go.sum)" ]; then
            echo "go.mod or go.sum is not tidy"
            git diff go.mod go.sum
            exit 1
          fi

  adapter-versions:
    name: Jira Adapter Version Tests
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22'

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-adapter-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-adapter-

      - name: Download dependencies
        run: go mod download

      - name: Test V1 Adapter
        run: |
          echo "Testing V1 Adapter..."
          TICKETR_JIRA_ADAPTER_VERSION=v1 go test ./internal/adapters/jira/... -v

      - name: Test V2 Adapter
        run: |
          echo "Testing V2 Adapter..."
          TICKETR_JIRA_ADAPTER_VERSION=v2 go test ./internal/adapters/jira/... -v

      - name: Test Default Adapter (should be V2)
        run: |
          echo "Testing default adapter (should use V2)..."
          go test ./internal/adapters/jira/... -v

  smoke-tests:
    name: Smoke Tests
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22'

      - name: Build application
        run: go build -o ticketr ./cmd/ticketr

      - name: Make smoke tests executable
        run: chmod +x tests/smoke/smoke_test.sh

      - name: Run smoke tests
        run: ./tests/smoke/smoke_test.sh

      - name: Upload smoke test logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: smoke-test-logs
          path: |
            /tmp/smoke-test-*
            .ticketr/logs/
          retention-days: 7
