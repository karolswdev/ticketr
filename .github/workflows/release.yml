name: Release

on:
  push:
    tags:
      - 'v*.*.*'

permissions:
  contents: write

jobs:
  build-and-release:
    name: Build and Release
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22'

      - name: Extract version from tag
        id: get_version
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
          echo "TAG=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Verify CHANGELOG entry
        run: |
          VERSION=${{ steps.get_version.outputs.VERSION }}
          if ! grep -q "\[$VERSION\]" CHANGELOG.md; then
            echo "ERROR: No CHANGELOG entry found for version $VERSION"
            echo "Please add a CHANGELOG entry before releasing"
            exit 1
          fi
          echo "CHANGELOG entry found for version $VERSION"

      - name: Download dependencies
        run: go mod download

      - name: Run tests
        run: go test ./... -v

      - name: Build binaries
        run: |
          VERSION=${{ steps.get_version.outputs.VERSION }}

          # Build for Linux (amd64)
          GOOS=linux GOARCH=amd64 go build -ldflags "-X main.Version=$VERSION" -o ticketr-linux-amd64 ./cmd/ticketr

          # Build for Linux (arm64)
          GOOS=linux GOARCH=arm64 go build -ldflags "-X main.Version=$VERSION" -o ticketr-linux-arm64 ./cmd/ticketr

          # Build for macOS (amd64)
          GOOS=darwin GOARCH=amd64 go build -ldflags "-X main.Version=$VERSION" -o ticketr-darwin-amd64 ./cmd/ticketr

          # Build for macOS (arm64 - Apple Silicon)
          GOOS=darwin GOARCH=arm64 go build -ldflags "-X main.Version=$VERSION" -o ticketr-darwin-arm64 ./cmd/ticketr

          # Build for Windows (amd64)
          GOOS=windows GOARCH=amd64 go build -ldflags "-X main.Version=$VERSION" -o ticketr-windows-amd64.exe ./cmd/ticketr

          # Create checksums
          sha256sum ticketr-* > checksums.txt

      - name: Create release archives
        run: |
          VERSION=${{ steps.get_version.outputs.VERSION }}

          # Linux amd64
          tar -czf ticketr-${VERSION}-linux-amd64.tar.gz ticketr-linux-amd64 README.md LICENSE

          # Linux arm64
          tar -czf ticketr-${VERSION}-linux-arm64.tar.gz ticketr-linux-arm64 README.md LICENSE

          # macOS amd64
          tar -czf ticketr-${VERSION}-darwin-amd64.tar.gz ticketr-darwin-amd64 README.md LICENSE

          # macOS arm64
          tar -czf ticketr-${VERSION}-darwin-arm64.tar.gz ticketr-darwin-arm64 README.md LICENSE

          # Windows
          zip ticketr-${VERSION}-windows-amd64.zip ticketr-windows-amd64.exe README.md LICENSE

      - name: Extract release notes from CHANGELOG
        id: release_notes
        run: |
          VERSION=${{ steps.get_version.outputs.VERSION }}

          # Extract release notes between version headers
          sed -n "/## \[$VERSION\]/,/## \[/p" CHANGELOG.md | sed '$d' > release_notes.md

          # If empty, use a default message
          if [ ! -s release_notes.md ]; then
            echo "Release $VERSION" > release_notes.md
            echo "" >> release_notes.md
            echo "See [CHANGELOG.md](CHANGELOG.md) for details." >> release_notes.md
          fi

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          name: Release ${{ steps.get_version.outputs.TAG }}
          body_path: release_notes.md
          draft: false
          prerelease: ${{ startsWith(steps.get_version.outputs.VERSION, '0.') }}
          files: |
            ticketr-${{ steps.get_version.outputs.VERSION }}-linux-amd64.tar.gz
            ticketr-${{ steps.get_version.outputs.VERSION }}-linux-arm64.tar.gz
            ticketr-${{ steps.get_version.outputs.VERSION }}-darwin-amd64.tar.gz
            ticketr-${{ steps.get_version.outputs.VERSION }}-darwin-arm64.tar.gz
            ticketr-${{ steps.get_version.outputs.VERSION }}-windows-amd64.zip
            checksums.txt
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  docker-release:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: build-and-release

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Extract version from tag
        id: get_version
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
          echo "TAG=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub (optional)
        if: env.DOCKER_USERNAME != ''
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}

      - name: Build Docker image
        run: |
          VERSION=${{ steps.get_version.outputs.VERSION }}
          docker build -t ticketr:$VERSION -t ticketr:latest .

      - name: Push to Docker Hub (optional)
        if: env.DOCKER_USERNAME != ''
        run: |
          VERSION=${{ steps.get_version.outputs.VERSION }}
          docker tag ticketr:$VERSION ${{ secrets.DOCKER_USERNAME }}/ticketr:$VERSION
          docker tag ticketr:latest ${{ secrets.DOCKER_USERNAME }}/ticketr:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/ticketr:$VERSION
          docker push ${{ secrets.DOCKER_USERNAME }}/ticketr:latest
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}

      - name: Save Docker image as artifact
        run: |
          VERSION=${{ steps.get_version.outputs.VERSION }}
          docker save ticketr:$VERSION | gzip > ticketr-$VERSION-docker.tar.gz

      - name: Upload Docker image to release
        uses: softprops/action-gh-release@v1
        with:
          files: ticketr-${{ steps.get_version.outputs.VERSION }}-docker.tar.gz
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
